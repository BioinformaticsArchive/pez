%\VignetteIndexEntry{EcoPhyl-intro}
%\VignettePackage{pez}
\documentclass[12pt]{article}
\usepackage{amssymb,amsmath}
\usepackage{geometry}
\geometry{letterpaper}
\usepackage{graphicx}
\usepackage{url}

\title{An introduction to the EcoPhyl package}
\author{Matt Helmus (???) and Will Pearse (wdpearse@umn.edu)}
\date{November 2013}

\begin{document}
\SweaveOpts{concordance=TRUE}
\SweaveOpts{strip.white=true}
%% <<echo=FALSE>>=
%% options(width=72)
%% opts_chunk$set(tidy=FALSE)
%% @

%% <<preliminaries,include=FALSE,cache=FALSE,message=FALSE>>=
%% options(width=69, show.signif.stars=FALSE,
%%              str=strOptions(strict.width="cut"),
%%              prompt = "R> ", continue = "   ")
%% library("knitr")
%% library("lme4")
%% library("ggplot2")
%% theme_set(theme_bw())
%% library("grid")
%% zmargin <- theme(panel.margin=unit(0,"lines"))
%% library("lattice")
%% opts_chunk$set(engine='R',dev='pdf',fig.width=9,prompt=TRUE,
%%                fig.height=5.5,cache=TRUE,tidy=FALSE,comment=NA)
%% @ % $ <- for emacs ESS

\maketitle

\tableofcontents

\section{Installing EcoPhyl}
You can install EcoPhyl by typing \texttt{install.packages("EcoPhyl", dependencies=TRUE)}, and get a listing of the functions in the package by typing \texttt{library(help=EcoPhyl)}. When loading EcoPhyl into your R session (\texttt{library(EcoPhyl)}), you may notice a warning about a package named 'ecoPD'. ecoPD is not maintained on CRAN like many other packages, but can still be installed by typing \text{install.packages("ecoPD", repos="http://R-Forge.R-project.org")}.

If you find any bugs, or have any feature requests for the package, please use the online tracker at \url{http://github.com/willpearse/XXX/issues}. Indeed, all the package's code is available at \url{http://github.com/willpearse/XXX/issues}, where you can suggest modifications and alterations as you wish! EcoPhyl is an evolving package; new functions and features will be added as we publish papers describing them.

Please make sure you cite the accompanying paper for EcoPhyl (XXX) when publishing work using it. Also, while \texttt{EcoPhyl} contains much novel code, it relies heavily on the \emph{R} ecosystem. Much of the community phylogenetic metric functions are wrappers around existing code (detailed in the help files for each function), in particular code from \texttt{picante}, \texttt{caper}, and \texttt{ecoPD} (REFS XXX)---please cite the authors of these packages so that their hard-work is rewarded!

\section{Data formats in EcoPhyl}
EcoPhyl functions work with `comparative community ecology' objects, called \texttt{comparative.comm} objects. These are designed to help keep phylogenies, community data matrices, species trait data, and environmental data all in the same place in a format that makes it easy to work with them. They're much less scary than they sound!

Below we load EcoPhyl, some example data that comes with it, and then make a comparative.comm object. You can examine the phylogeny ('tree'), community data ('comm'), and trait data ('traits') that went into making dataset for yourself, although all the data types are explained in more detail below.

<<>>=
library(pez)
data(EcoPhyl)
data <- comparative.comm(traits.and.phy$phy, 
                         traits.and.phy$comm, 
                         traits.and.phy$traits)
data
@

EcoPhyl is conservative; if you give it trait data for only half of the species in your community data, the comparative.comm object will only contain data on those species that have both trait data and community data. The same goes for the phylogeny, and for sites with environmental data. EcoPhyl will warn you about the loss of species or traits when you print the object to screen, and while it's making the comparative.comm object (unless you set the argument warm=FALSE).

You can also subset your comparative.comm object to exclude certain species or sites, in much the same way you can a data.frame. Note that EcoPhyl will not (by default) warn you if this operation drops out certain species or sites. For example:

<<>>=
data[1:5,]
data[,1:3]
data[,1:3,warn=TRUE]
@

\subsection{Phylogenies}

EcoPhyl uses the \texttt{phylo} format in the \texttt{ape} package to store phylogenues. You can load your own phylogenies using the ape functions 'read.tree' and 'read.nexus'.

\subsection{Community data}

EcoPhyl uses the same community data format as the \texttt{vegan} package: a matrix or data.frame with sites in the rows and species in the columns. The elements of the community matrix can be species abundances or presence/absence (1/0). Not all the species in your matrix have to be present in a site, i.e. there can be empty columns in your data. This is particularly important when using the dispersion measures (see below). Your data should be named, with row names have correspond to sites, and column names that correspond to species.

\subsection{Trait data}
Trait data should be a data.frame with row names that correspond to the species in the phylogeny, and named columns for each separate trait.

\subsection{Environemntal data}
Environmental data should be a data.frame with row names that correpsond to the sites in your community data, and separate (named) columns for each kind of environmental data.

\section{Plotting and exploring data}
EcoPhyl comes with a few functions that are intended to make exploring your data slightly easier. For instance, you can plot out graphs of species abundances in communities

<<fig=TRUE>>=
cc.dotplot(data)
#cc.barplot(data, c(""))
@

\section{Community phylogenetic metrics}
EcoPhyl splits community phylogenetic metrics into four functions according to the scheme outlined by Pearse et al. (XXX): \texttt{shape}, \texttt{evenness}, \texttt{dispersion}, and \texttt{dissimilarity}. In brief, \emph{shape} metrics ignore abundances, \emph{evenness} metrics incorporates abundances, \emph{dispersion} metrics compare observed communities with source pools of potential species, and \emph{dissimilarity} metrics compare one community with another.

You can calculate all metrics within a class at the same time (which is what we recommend), or you can pick a particular one. Below we show how to calculate the metrics, and give examples of how to work with their output.

<<fig=TRUE>>=
shape.output <- shape(data)
shape.output
shape.output$mpd
dissimilarity.output <- dissimilarity(data, metric="phylosor")
plot(hclust(dissimilarity.output$phylosor))
@

\section{Eco-evolutionary regression (EcoPhyl)}
EcoPhyl is intended to replace and improve upon earlier Visual Basic/C programs called EcoPhyl. You can regress the relative coexistence of species in your dataset against those species phylogenetic (\texttt{eco.phy.regression}) and trait (\texttt{eco.trait.regression}) dissimilarity, as well as shared habitat preferences based on environmental tolerances (\texttt{eco.env.regression}). Note that you can examine all traits at the same time, or each trait separately. Below are some examples.

<<fig=TRUE>>=
model <- eco.trait.regression(data, method="lm")
model
more.complex.model <- eco.trait.regression(data, method="mantel", altogether=FALSE, permute=10)
more.complex.model
more.complex.model[[1]]
plot(eco.phy.regression(data, method="quantile"))
@

However, you can also regress the phylogenetic signal of traits in your dataset against the output from an \texttt{eco.trait.regression} on those traits. This allows you to generate figures similar to those of Cavendar-Bares et al. (2004; figure 4 XXX), only now with more modern measures of phylogenetic signal in traits (accessibly through the function \texttt{phy.signal}). For instance:

<<fig=TRUE>>=
model <- jcb.regression(data, eco.permute=100)
plot(model)
@
\section{Phylogenetic Generalised Linear Mixed Models}
Matt, could you write this?

\end{document}
